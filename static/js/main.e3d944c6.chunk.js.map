{"version":3,"sources":["components/Pokemon/Pokemon.module.css","assets/images/defaultAvatar.png","components/Pokemon/Pokemon.jsx","store/pokemon-store.js","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokemon","this","props","store","loadPokemons","Pokemons","count","limit","perPage","currentPage","loading","onLimitChanged","onPageChanged","setTemplateSearchByName","templatePokemonName","pokemonTypes","setSelectedTypes","selectedTypes","clearForm","setColorType","name","s","bug","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","poison","psychic","rock","steel","water","pagesCount","Math","ceil","pages","i","push","data","toJS","isOptionSelected","type","includes","Container","maxWidth","Grid","container","spacing","item","xs","sm","md","lg","onSubmit","InputLabel","shrink","htmlFor","Input","placeholder","Button","className","Select","multiple","native","variant","inputProps","map","key","value","selected","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","p","hover","src","sprites","front_default","defaultAvatar","alt","types","t","stats","baseStat","base_stat","TableFooter","colSpan","TablePagination","component","rowsPerPageOptions","rowsPerPage","onChangeRowsPerPage","page","onChangePage","React","Component","observer","configure","enforceActions","Store","offset","tmpCount","tmpPokemons","getPokemonsByType","axios","getListUrlForSelectedTypes","pokemonLinks","Promise","all","then","response","arr","pokemon","el","selectionElementsForPage","selection","slice","getDetailsForPokemonsByUrl","length","e","options","target","searchTypes","l","preventDefault","a","async","results","searchPokemonsByName","getPokemonsInfo","url","searchResult","filter","pName","newOffset","setOffset","cnt","runInAction","setCount","setPokemons","event","decorate","observable","action","getPokemonsStats","handleSubmitName","Header","AppBar","position","Toolbar","Typography","App","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3d944c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bug\":\"Pokemon_bug__2SdzW\",\"dark\":\"Pokemon_dark__bCMxD\",\"dragon\":\"Pokemon_dragon__1yu6n\",\"electric\":\"Pokemon_electric__Op9KL\",\"fairy\":\"Pokemon_fairy__1if2Y\",\"fighting\":\"Pokemon_fighting__sB_xL\",\"fire\":\"Pokemon_fire__ONGJa\",\"flying\":\"Pokemon_flying__1AjZa\",\"ghost\":\"Pokemon_ghost__1pYMf\",\"grass\":\"Pokemon_grass__3LSbM\",\"ground\":\"Pokemon_ground__1hsZI\",\"ice\":\"Pokemon_ice__23EPt\",\"normal\":\"Pokemon_normal__3sb0g\",\"poison\":\"Pokemon_poison__3H0bG\",\"psychic\":\"Pokemon_psychic__wE9Bh\",\"rock\":\"Pokemon_rock__txzAv\",\"steel\":\"Pokemon_steel__1aATd\",\"water\":\"Pokemon_water__3Ko8r\"};","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.2b1594bb.png\";","import React from 'react';\r\nimport {observer} from \"mobx-react\";\r\nimport s from \"./Pokemon.module.css\";\r\nimport { toJS } from 'mobx';\r\nimport defaultAvatar from \"../../assets/images/defaultAvatar.png\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nclass Pokemon extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.store.loadPokemons();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            Pokemons,\r\n            count, limit, perPage, currentPage, loading,\r\n            onLimitChanged, onPageChanged,\r\n            templatePokemonName, setTemplateSearchByName,\r\n            pokemonTypes, setSelectedTypes, selectedTypes,\r\n            clearForm} = this.props.store;\r\n\r\n        let setColorType = (name) => {\r\n            switch (name) {\r\n                case \"bug\": return s.bug; break;\r\n                case \"dark\": return s.dark; break;\r\n                case \"dragon\": return s.dragon; break;\r\n                case \"electric\": return s.electric; break;\r\n                case \"fairy\": return s.fairy; break;\r\n                case \"fighting\": return s.fighting; break;\r\n                case \"fire\": return s.fire; break;\r\n                case \"flying\": return s.flying; break;\r\n                case \"ghost\": return s.ghost; break;\r\n                case \"grass\": return s.grass; break;\r\n                case \"ground\": return s.ground; break;\r\n                case \"ice\": return s.ice; break;\r\n                case \"normal\": return s.normal; break;\r\n                case \"poison\": return s.poison; break;\r\n                case \"psychic\": return s.psychic; break;\r\n                case \"rock\": return s.rock; break;\r\n                case \"steel\": return s.steel; break;\r\n                case \"water\": return s.water; break;\r\n            }\r\n        };\r\n\r\n        let pagesCount = Math.ceil(count / limit);\r\n\r\n        let pages = [];\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i);\r\n        }\r\n\r\n        let data = toJS(Pokemons);\r\n\r\n        let isOptionSelected = (type) => {\r\n            if(selectedTypes.includes(type)) {\r\n                return \"selected\";\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={3} md={2} lg={2}>\r\n\r\n                        <form onSubmit={setTemplateSearchByName}>\r\n                            <InputLabel shrink htmlFor=\"select-multiple-native\">\r\n                                Search by Name\r\n                            </InputLabel>\r\n                            <Input type=\"text\"\r\n                                   name=\"templatePokemonName\"\r\n                                   placeholder=\"Enter pokemon's name\" />\r\n                            <Button type=\"submit\" className=\"MuiButton-containedPrimary MuiButton-containedSizeSmall\">Search</Button>\r\n                        </form>\r\n\r\n                        <form onSubmit={setSelectedTypes}>\r\n                            <InputLabel shrink htmlFor=\"select-multiple-native\">\r\n                                Search by Type\r\n                            </InputLabel>\r\n                            <Select\r\n                                multiple\r\n                                native\r\n                                variant=\"outlined\"\r\n                                inputProps={{\r\n                                    name: \"searchTypes\"\r\n                                }}\r\n                            >\r\n                                {\r\n                                    pokemonTypes.map( (type) => <option key={type} value={type} selected={isOptionSelected(type)}>{type}</option> )\r\n                                }\r\n                            </Select>\r\n                            <Button type=\"submit\" className=\"MuiButton-containedPrimary MuiButton-containedSizeSmall\">Search</Button>\r\n                        </form>\r\n\r\n                        <form onSubmit={clearForm}>\r\n                            <Button type=\"submit\" className=\"MuiButton-outlinedSecondary MuiButton-containedSizeSmall\">Clear Form</Button>\r\n                        </form>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={9} md={10} lg={10}>\r\n                        {loading ? <div>Loading...</div> : (\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">Name</TableCell>\r\n                                            <TableCell align=\"center\">Types</TableCell>\r\n                                            <TableCell align=\"center\">Speed</TableCell>\r\n                                            <TableCell align=\"center\">Sp. Defense</TableCell>\r\n                                            <TableCell align=\"center\">Sp. Attack</TableCell>\r\n                                            <TableCell align=\"center\">Defense</TableCell>\r\n                                            <TableCell align=\"center\">Attack</TableCell>\r\n                                            <TableCell align=\"center\">HP</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {\r\n                                            data.map((p) =>\r\n                                                <TableRow hover>\r\n                                                    <TableCell align=\"center\"><img\r\n                                                        src={p.data.sprites.front_default ? p.data.sprites.front_default : defaultAvatar}\r\n                                                        alt={p.data.name}/><br/><strong>{p.data.name}</strong></TableCell>\r\n                                                    <TableCell align=\"center\">\r\n                                                        {\r\n                                                            p.data.types.map(t =>\r\n                                                                <div\r\n                                                                    className={setColorType(t.type.name)}>{t.type.name}</div>\r\n                                                            )\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                    {\r\n                                                        p.data.stats.map(baseStat =>\r\n                                                            <TableCell\r\n                                                                align=\"center\"> {baseStat.base_stat}</TableCell>\r\n                                                        )\r\n                                                    }\r\n                                                </TableRow>\r\n                                            )\r\n                                        }\r\n                                    </TableBody>\r\n                                    <TableFooter>\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={8}>\r\n                                                <TablePagination\r\n                                                    component=\"div\"\r\n                                                    rowsPerPageOptions={perPage}\r\n                                                    rowsPerPage={limit}\r\n                                                    onChangeRowsPerPage={onLimitChanged}\r\n                                                    page={currentPage}\r\n                                                    onChangePage={onPageChanged}\r\n                                                    count={count}\r\n                                                />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableFooter>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Container>\r\n                )}\r\n\r\n}\r\n\r\nexport default observer(Pokemon);","import {action, configure, decorate, observable, runInAction} from \"mobx\";\r\nimport * as axios from \"axios\";\r\nimport React from \"react\";\r\n\r\nconfigure({enforceActions: true});\r\n\r\nclass Store {\r\n\r\n    Pokemons = [];\r\n    perPage = [10, 20, 50];\r\n    limit = 10;\r\n    offset = 0;\r\n    count = 0;\r\n    currentPage = 0;\r\n    loading = true;\r\n    templatePokemonName = null;\r\n    tmpCount = 0;\r\n    selectedTypes = [];\r\n    tmpPokemons = [];\r\n    pokemonTypes = [\"grass\", \"poison\", \"bug\", \"dark\", \"dragon\", \"electric\", \"fairy\", \"fighting\", \"fire\", \"flying\", \"ghost\", \"grass\", \"ground\", \"ice\", \"normal\", \"poison\", \"psychic\", \"rock\", \"steel\", \"water\"];\r\n\r\n    getPokemonsByType = (t) => {\r\n        return axios.get(`https://pokeapi.co/api/v2/type/` + t)\r\n    }\r\n\r\n    getListUrlForSelectedTypes =  () => {\r\n        let pokemonLinks = [];\r\n        this.loading = true;\r\n        Promise.all(\r\n            this.selectedTypes.map (t => {\r\n                return this.getPokemonsByType(t);\r\n            })\r\n        ).then( response => {\r\n            response.map( arr => {\r\n                let data = arr.data.pokemon;\r\n                data.map( el => {\r\n                    pokemonLinks.push(el.pokemon);\r\n                })\r\n            });\r\n            this.tmpPokemons = pokemonLinks;\r\n            this.selectionElementsForPage(this.tmpPokemons);\r\n        })\r\n    }\r\n\r\n    selectionElementsForPage = (pokemonLinks) => {\r\n        let selection = pokemonLinks.slice(this.offset, this.offset+this.limit);\r\n        this.loading = true;\r\n        this.getDetailsForPokemonsByUrl(selection, pokemonLinks.length);\r\n    }\r\n\r\n    setSelectedTypes = (e) => {\r\n        this.loading = true;\r\n        this.templatePokemonName = \"\";\r\n        let options = e.target.searchTypes;\r\n        let value = [];\r\n        for (let i = 0, l = options.length; i < l; i++) {\r\n            if (options[i].selected) {\r\n                value.push(options[i].value);\r\n            }\r\n        }\r\n        this.selectedTypes = value;\r\n        this.getListUrlForSelectedTypes();\r\n        e.preventDefault();\r\n    }\r\n\r\n    loadPokemons = async () => {\r\n        await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=${this.offset}&limit=${this.limit}`)\r\n            .then(response => {\r\n                this.tmpCount = response.data.count;\r\n                let pokemonLinks = response.data.results;\r\n                this.templatePokemonName ?\r\n                    this.searchPokemonsByName(pokemonLinks) :\r\n                    this.getDetailsForPokemonsByUrl(pokemonLinks, response.data.count);\r\n            })\r\n    };\r\n\r\n    getPokemonsInfo = (url) => {\r\n        return axios.get(url)\r\n    };\r\n\r\n    searchPokemonsByName = (pokemonLinks) => {\r\n        let searchResult = pokemonLinks.filter( pName => {\r\n            return pName.name === this.templatePokemonName;\r\n        });\r\n\r\n        if(searchResult.length > 0) {\r\n            this.getDetailsForPokemonsByUrl(searchResult, pokemonLinks.length);\r\n\r\n        } else {\r\n            if(this.offset < 20) {\r\n                let newOffset = this.offset + this.limit;\r\n                this.setOffset(newOffset);\r\n                this.loadPokemons();\r\n            }\r\n        }\r\n    }\r\n\r\n    getDetailsForPokemonsByUrl = (pokemonLinks, cnt) => {\r\n        Promise.all(\r\n            pokemonLinks.map( p => {\r\n                return this.getPokemonsInfo(p.url);\r\n            })\r\n        ).then( response => {\r\n            runInAction(() => {\r\n                this.setCount(cnt);\r\n                this.setPokemons(response);\r\n                this.loading = false;\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    onLimitChanged = (event) => {\r\n        runInAction( () => {\r\n            let l = event.target.value;\r\n            this.limit = l;\r\n            this.offset = this.currentPage*l;\r\n            this.loading = true;\r\n            this.selectedTypes.length > 0 ? this.selectionElementsForPage(this.tmpPokemons) : this.loadPokemons();\r\n        });\r\n    };\r\n\r\n    onPageChanged = (event, page) => {\r\n        runInAction( () => {\r\n            let p = page;\r\n            this.currentPage = p;\r\n            this.offset = p*this.limit;\r\n            this.loading = true;\r\n            this.selectedTypes.length > 0 ? this.selectionElementsForPage(this.tmpPokemons) : this.loadPokemons();\r\n\r\n        });\r\n\r\n    };\r\n\r\n    setPokemons = data => {\r\n        this.Pokemons = data;\r\n    };\r\n\r\n    setCount = count => {\r\n        this.count = count;\r\n    };\r\n\r\n    setOffset = offset => {\r\n        this.offset = offset;\r\n    };\r\n\r\n    setTemplateSearchByName = (e) => {\r\n        this.selectedTypes = [];\r\n        this.templatePokemonName = e.target.templatePokemonName.value;\r\n        this.setOffset(0);\r\n        this.loadPokemons();\r\n        e.preventDefault();\r\n    };\r\n\r\n    clearForm = (e) => {\r\n        this.selectedTypes = [];\r\n        this.templatePokemonName = \"\";\r\n        this.loadPokemons();\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n\r\nStore = decorate(Store, {\r\n    Pokemons: observable,\r\n    count: observable,\r\n    offset: observable,\r\n    limit: observable,\r\n    currentPage: observable,\r\n    loading: observable,\r\n    templatePokemonName: observable,\r\n    tmpCount: observable,\r\n    onLimitChanged: action,\r\n    onPageChanged: action,\r\n    loadPokemons: action,\r\n    getPokemonsStats: action,\r\n    setPokemons: action,\r\n    setCount: action,\r\n    setTemplateSearchByName: action,\r\n    searchPokemonsByName: action,\r\n    handleSubmitName:action,\r\n    setSelectedTypes: action,\r\n    selectionElementsForPage: action\r\n});\r\n\r\nexport default new Store;","import React from 'react';\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" >\r\n                    Pokemons\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Pokemon from \"./components/Pokemon/Pokemon\";\nimport {observer} from \"mobx-react\";\nimport store from './store/pokemon-store';\nimport Header from \"./components/Header/Header\";\n\nclass App extends React.Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <Header />\n          <main role=\"main\">\n            <div className=\"container\">\n              <Pokemon store = {store} />\n            </div>\n          </main>\n        </div>\n    )\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}